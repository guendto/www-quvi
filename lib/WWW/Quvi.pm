# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package WWW::Quvi;
use base qw(Exporter);
use base qw(DynaLoader);
package WWW::Quvic;
bootstrap WWW::Quvi;
package WWW::Quvi;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package WWW::Quvi;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package WWW::Quvi;

*version = *WWW::Quvic::version;

############# Class : WWW::Quvi::Options ##############

package WWW::Quvi::Options;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( WWW::Quvi );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = WWW::Quvic::new_Options(@_);
    bless $self, $pkg if defined($self);
}

*swig_user_agent_get = *WWW::Quvic::Options_user_agent_get;
*swig_user_agent_set = *WWW::Quvic::Options_user_agent_set;
*swig_http_proxy_get = *WWW::Quvic::Options_http_proxy_get;
*swig_http_proxy_set = *WWW::Quvic::Options_http_proxy_set;
*swig_verbose_libcurl_get = *WWW::Quvic::Options_verbose_libcurl_get;
*swig_verbose_libcurl_set = *WWW::Quvic::Options_verbose_libcurl_set;
*swig_format_get = *WWW::Quvic::Options_format_get;
*swig_format_set = *WWW::Quvic::Options_format_set;
*swig_verify_get = *WWW::Quvic::Options_verify_get;
*swig_verify_set = *WWW::Quvic::Options_verify_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        WWW::Quvic::delete_Options($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : WWW::Quvi::Link ##############

package WWW::Quvi::Link;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( WWW::Quvi );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = WWW::Quvic::new_Link(@_);
    bless $self, $pkg if defined($self);
}

*swig_content_type_get = *WWW::Quvic::Link_content_type_get;
*swig_content_type_set = *WWW::Quvic::Link_content_type_set;
*swig_file_suffix_get = *WWW::Quvic::Link_file_suffix_get;
*swig_file_suffix_set = *WWW::Quvic::Link_file_suffix_set;
*swig_length_bytes_get = *WWW::Quvic::Link_length_bytes_get;
*swig_length_bytes_set = *WWW::Quvic::Link_length_bytes_set;
*swig_url_get = *WWW::Quvic::Link_url_get;
*swig_url_set = *WWW::Quvic::Link_url_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        WWW::Quvic::delete_Link($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : WWW::Quvi::Video ##############

package WWW::Quvi::Video;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( WWW::Quvi );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = WWW::Quvic::new_Video(@_);
    bless $self, $pkg if defined($self);
}

*swig_title_get = *WWW::Quvic::Video_title_get;
*swig_title_set = *WWW::Quvic::Video_title_set;
*swig_host_get = *WWW::Quvic::Video_host_get;
*swig_host_set = *WWW::Quvic::Video_host_set;
*swig_url_get = *WWW::Quvic::Video_url_get;
*swig_url_set = *WWW::Quvic::Video_url_set;
*swig_id_get = *WWW::Quvic::Video_id_get;
*swig_id_set = *WWW::Quvic::Video_id_set;
*swig_link_get = *WWW::Quvic::Video_link_get;
*swig_link_set = *WWW::Quvic::Video_link_set;
*swig_ok_get = *WWW::Quvic::Video_ok_get;
*swig_ok_set = *WWW::Quvic::Video_ok_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        WWW::Quvic::delete_Video($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : WWW::Quvi::Query ##############

package WWW::Quvi::Query;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( WWW::Quvi );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = WWW::Quvic::new_Query(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        WWW::Quvic::delete_Query($self);
        delete $OWNER{$self};
    }
}

*parse = *WWW::Quvic::Query_parse;
*next_website = *WWW::Quvic::Query_next_website;
*swig_last_error_get = *WWW::Quvic::Query_last_error_get;
*swig_last_error_set = *WWW::Quvic::Query_last_error_set;
*swig_quvi_code_get = *WWW::Quvic::Query_quvi_code_get;
*swig_quvi_code_set = *WWW::Quvic::Query_quvi_code_set;
*swig_resp_code_get = *WWW::Quvic::Query_resp_code_get;
*swig_resp_code_set = *WWW::Quvic::Query_resp_code_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- CONSTANT STUBS -------

package WWW::Quvi;

sub libquviVersion () { $WWW::Quvic::libquviVersion }
sub libquviVersionLong () { $WWW::Quvic::libquviVersionLong }
sub ModuleVersion () { $WWW::Quvic::ModuleVersion }
sub OK () { $WWW::Quvic::OK }
sub Mem () { $WWW::Quvic::Mem }
sub BadHandle () { $WWW::Quvic::BadHandle }
sub InvArg () { $WWW::Quvic::InvArg }
sub CurlInit () { $WWW::Quvic::CurlInit }
sub Last () { $WWW::Quvic::Last }
sub AbortedByCallback () { $WWW::Quvic::AbortedByCallback }
sub LuaInit () { $WWW::Quvic::LuaInit }
sub NoLuaWebsite () { $WWW::Quvic::NoLuaWebsite }
sub NoLuaUtil () { $WWW::Quvic::NoLuaUtil }
sub PcreError () { $WWW::Quvic::PcreError }
sub NoSupport () { $WWW::Quvic::NoSupport }
sub CurlError () { $WWW::Quvic::CurlError }
sub IconvError () { $WWW::Quvic::IconvError }
sub LuaError () { $WWW::Quvic::LuaError }

# ------- VARIABLE STUBS --------

package WWW::Quvi;

*_VERSION = *WWW::Quvic::_VERSION;
1;
