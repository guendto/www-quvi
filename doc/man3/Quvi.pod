=head1 NAME

WWW::Quvi - Perl extension interface for libquvi

=head1 SYNOPSIS

  use WWW::Quvi;
  my $q = new WWW::Quvi::Query;
  my $m = $q->parse($url);
  croak "error: $q->{errmsg}" unless $q->{ok};

=head1 DESCRIPTION

WWW::Quvi provides a Perl interface to libquvi, a small C library for
parsing Flash media stream URLs. It is written in C++ and uses SWIG to
connect to the libquvi API.

=head1 DOCUMENTATION

This module provides a Perl interface to libquvi. This documentation
contains the Perl specific details and some sample code. The libquvi
documentation should be consulted for the API details at
L<http://quvi.sourceforge.net/>.

=head1 WWW::Quvi::version

A wrapper function that returns WWW::Quvi version and libquvi version
information.

  WWW::Quvi::version;                           # Module version
  WWW::Quvi::version(WWW::Quvi::ModuleVersion); # Ditto.
  WWW::Quvi::version(WWW::Quvi::libquviVersion);
  WWW::Quvi::version(WWW::Quvi::libquviVersionLong);

=head1 WWW::Quvi::Options

A container hash for the options used with libquvi that would normally
(using the C API) be set with C<quvi_setopt(3)>.

  $opts->{verbose_libcurl} = 1;                    # Default: 0
  $opts->{user_agent}      = 'Foo/1.0';            # Default: ""
  $opts->{http_proxy}      = 'http://foo:1234';    # Default: ""
  $opts->{category}        = WWW::Quvi::ProtoHttp; # Default: ProtoAll
  $opts->{resolve}         = 0;                    # Default: 1
  $opts->{format}          = 'best';               # Default: "default"
  $opts->{verify}          = 0;                    # Default: 1

=head1 WWW::Quvi::Media

A container hash that holds the parsed media details accessible using
C<quvi_getprop(3)>.

  $media->{content_length}  # Content length as returned by the server
  $media->{thumbnail_url}   # Thumbnail URL (if any)
  $media->{content_type}    # Content-type as returned by the server
  $media->{file_suffix}     # File suffix parsed from the content-type
  $media->{start_time}      # Start time for media (if any)
  $media->{page_title}      # Media title
  $media->{page_url}        # Page URL
  $media->{duration}        # Duration in msec (if any)
  $media->{host}            # Host string
  $media->{url}             # Media stream URL
  $media->{id}              # Media ID

=head1 WWW::Quvi::Query

=over 4

=item parse($url)  [function]

Parse media details for URL. Returns WWW::Quvi::Media object.

  my $m = $q->parse($url);

=item ($domain, $formats) next_website()  [function]

Return next supported website (domain, formats). These values are
returned by the libquvi webscripts.

Note that C<formats> no practical use since libquvi 0.2.17. This
function is most useful for listing the available support.

Use the C<formats> function (below) instead if you need to know which
formats are available to an URL.

  while ($q->{ok}) {
    my ($d,$f) = $q->next_website;
    print "$d\t$f\n" if $q->{ok};
  }

=item formats($url)  [function]

Returns a string containing a list of available formats to an URL. Each
format ID is separated by a pipe character.

  my $fmts = $q->formats($url);
  croak "error: $q->{errmsg}" unless $q->{ok};
  print "$_\n" foreach (split /\|/, $fmts);

=item set_opts($opts)  [function]

Set Query options (see also L</WWW::Quvi::Options>).

=item supported($url)  [function]

Returns a non-zero value if the URL is not supported.

This is a networkless check meaning that it will return
WWW::Quvi::NoSupport for most shortened (or compressed) URLs.

If your application must support such URLs, use Query::parse
instead and make sure you have not set 'resolve' to 0 (disable)
in your L</WWW::Quvi::Options>.

=item ok  [variable]

Non-zero if an error occurred.

=item errmsg  [variable]

Last error message. Check L</ok> flag for errors.

  croak $q->{errmsg} unless $q->{ok};

=item quvi_code  [variable]

Last libquvi returned code.

=item resp_code  [variable]

Last response (assumed HTTP) code returned by the server.

=back

=head1 RETURN CODES (WWW::Quvi::*)

L</WWW::Quvi::Query> saves the last libquvi returned code as
C<quvi_code>. In most cases, it is sufficient to just check
the C<ok> and use the C<errmsg> instead.

  OK                # No error
  Mem               # Memory allocation error
  BadHandle         # Bad handle
  InvArg            # Invalid function argument
  CurlInit          # libquvi initialization failure
  Last              # Last element in the list
  AbortedByCallBack # Aborted by a callback function
  LuaInit           # liblua initialization failure
  NoLuaWebsite      # Failed to find any libquvi webscripts
  NoLuaUtil         # Failed to find the libquvi utility scripts
  NoSupport         # libquvi cannot handle the URL
  CallbackError     # Network callback error occurred
  IconvError        # libiconv error occurred
  LuaError          # liblua (or webscript) error occurred

Note that L</WWW::Quvi::Query> saves the last server returned
B<HTTP code> as C<resp_code>. This documentation does not cover
the I<HTTP codes>.

=head1 PROTOCOL CATEGORIES (WWW::Quvi::*)

The protocol category defines which of the webscripts, that libquvi
provides, your application is interested in.

For example, if your application can handle only HTTP connections,
then it would make sense to set the C<category> (see
L</WWW::Quvi::Options>) to C<ProtoHttp>.

  ProtoHttp     # Protocol category HTTP
  ProtoMms      # ...
  ProtoRtsp     # ...
  ProtoRtmp     # ...
  ProtoAll      # Any of the above categories

=head1 NOT IMPLEMENTED

=over 4

=item B<quvi_supported_ident at al>

=item B<Linked list interface>

=item B<Network interface>

=item B<Media segments>

=item B<Callbacks>

=back

=head1 WWW

 Home  : http://www-quvi.sourceforge.net/
 gitweb: http://repo.or.cz/w/www-quvi.git

=head1 LICENSE

WWW::Quvi is free software, licensed under the LGPLv2.1+.

=head1 SEE ALSO

C<quvi(1)>

=head1 AUTHOR

Toni Gundogdu <legatvs at sign gmail com>
